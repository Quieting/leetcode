package leetcode

// imageSmoother 图片平滑器
// 图像平滑器 是大小为 3 x 3 的过滤器，用于对图像的每个单元格平滑处理，平滑处理后单元格的值为该单元格的平均灰度。
//
// 每个单元格的  平均灰度 定义为：该单元格自身及其周围的 8 个单元格的平均值，结果需向下取整。（即，需要计算蓝色平滑器中 9 个单元格的平均值）。
//
// 如果一个单元格周围存在单元格缺失的情况，则计算平均灰度时不考虑缺失的单元格（即，需要计算红色平滑器中 4 个单元格的平均值）。
//
// m == img.length
// n == img[i].length
// 1 <= m, n <= 200
// 0 <= img[i][j] <= 255
//
// 示例1
// 输入:img = [[1,1,1],[1,0,1],[1,1,1]]
// 输出:[[0, 0, 0],[0, 0, 0], [0, 0, 0]]
// 解释:
// 对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0
// 对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0
// 对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0
//

func imageSmoother(img [][]int) [][]int {
	r := len(img)
	c := len(img[0])

	ns := make([][]int, r)
	// 计算平均灰度
	for i := 0; i < r; i++ {
		row := make([]int, len(img[i]))
		for j := 0; j < c; j++ {
			sum := img[i][j]
			num := 1
			// 左上角点
			if i-1 >= 0 && j-1 >= 0 {
				sum += img[i-1][j-1]
				num++
			}
			// 上方
			if i-1 >= 0 {
				sum += img[i-1][j]
				num++
			}
			// 右上角
			if i-1 >= 0 && j+1 < c {
				sum += img[i-1][j+1]
				num++
			}

			// 左方
			if j-1 >= 0 {
				sum += img[i][j-1]
				num++
			}

			// 有方
			if j+1 < c {
				sum += img[i][j+1]
				num++
			}

			// 下方
			if i+1 < r {
				sum += img[i+1][j]
				num++
			}

			// 左下方
			if i+1 < r && j-1 >= 0 {
				sum += img[i+1][j-1]
				num++
			}

			// 右下方
			if i+1 < r && j+1 < c {
				sum += img[i+1][j+1]
				num++
			}

			row[j] = sum / num
		}
		ns[i] = row
	}
	return ns
}
